daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections 1024;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_types text/plain text/css text/json text/javascript application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/xml font/opentype image/svg+xml text/xml;

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log logs/nginx/access.log l2met;
  error_log logs/nginx/error.log;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  upstream app_server {
  	# Must match with config/puma.rb
    server unix:/tmp/nginx.socket fail_timeout=0;
  }

  # server {
  #   listen <%= ENV["PORT"] %>;
  #   server_name ul.urbanzoom.com;
  #   root /;

  #   location / {
  #     proxy_set_header X-Real-IP $remote_addr;
  #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #     proxy_set_header Host $http_host;
  #     proxy_redirect off;

  #     if ($http_x_forwarded_proto != 'https') {
  #       rewrite ^ https://$host$request_uri? permanent;
  #     }

  #     proxy_pass http://app_server/urbanlistings;
  #   }
  # }

  server {
    listen <%= ENV["PORT"] %>;
    server_name _;
    port_in_redirect off;
    keepalive_timeout 5;
    client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    location ~* ^/assets/ {
      gzip_static on;

      # Per RFC2616 - 1 yeauserr maximum expiry
      expires 1y;
      add_header Cache-Control public;

      # Some browsers still send conditional-GET requests if there's a
      # Last-Modified header or an ETag header even if they haven't
      # reached the expiry date sent in the Expires header.
      add_header Last-Modified "";
      add_header ETag "";
      break;

      proxy_pass http://app_server;
    }

    location / {
    	proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      if ($http_x_forwarded_proto != 'https') {
        rewrite ^ https://$host$request_uri? permanent;
      }

      proxy_pass http://app_server;

      location ~* \.(eot|oft|svg|ttf|woff|woff2?)$ {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://app_server;
      }

      location /en {
        rewrite ^/en$ / permanent;
      }

      location /en/ {
        rewrite ^/en/(.*) /$1 permanent;
      }
    }

    location /blog/ {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;

      if ($http_x_forwarded_proto != 'https') {
        rewrite ^ https://$host$request_uri? permanent;
      }

      proxy_pass <%= ENV['BLOG_URL'] %>;
      client_max_body_size 50M;
      proxy_ssl_server_name on;
    }

    location ~ ^/urbanlistings/(.*)$ {
      return 301 http://www.urbanlistings.com$request_uri;
    }
  }

  server {
    listen <%= ENV["PORT"] %>;
    server_name urbanlistings.com;

    location ~* ^/assets/ {
      gzip_static on;

      # Per RFC2616 - 1 yeauserr maximum expiry
      expires 1y;
      add_header Cache-Control public;

      # Some browsers still send conditional-GET requests if there's a
      # Last-Modified header or an ETag header even if they haven't
      # reached the expiry date sent in the Expires header.
      add_header Last-Modified "";
      add_header ETag "";
      break;

      proxy_pass http://app_server;
    }

    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      if ($http_x_forwarded_proto != 'https') {
        rewrite ^ https://$host$request_uri? permanent;
      }

      proxy_pass http://app_server/urbanlistings;

      location ~* \.(eot|oft|svg|ttf|woff|woff2?)$ {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://app_server;
      }
    }
  }
}
